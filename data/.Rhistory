ddply(data2,.(Trt),summarise,sd(Carbon))
ddply(data2,.(Trt),summarise,mean(Carbon))
mean(data2$byDensity)
lmer(log(Carbon)~ Trt + (Sp|Plot),data=data2)
ks.test(data$Carbon)
?ks.test
shapiro.test(data$Carbon)
shapiro.test(log(data$Carbon))
log(data$Carbon)
shapiro.test(log(data$Carbon))
a <- log(data$Carbon)
shapiro.test(a)
shapiro.test(log(data2$Carbon))
lmer(log(Carbon)~ Trt + (Sp|Plot),data=data2)
lmer(log(Carbon)~ Trt + (byDensity|Plot),data=data2)
lmer(log(Carbon)~ Trt + (Sp|Plot),data=data2)
lmer(log(Carbon)~ Trt + (0+Sp|Plot),data=data2)
lmer(log(Carbon)~ Trt + (0|SP/Plot),data=data2)
lmer(log(Carbon)~ Trt + (0|Sp/Plot),data=data2)
lmer(log(Carbon)~ Trt + (1|Plot) + (1|Sp) ,data=data2)
lmer(log(Carbon)~ Trt + (0|Plot) + (0|Sp) ,data=data2)
lmer(log(Carbon)~ Trt + (0|Plot)  ,data=data2)
lmer(log(Carbon)~ Trt + (1|Plot)  ,data=data2)
lmer(log(Carbon)~ Trt + (0|Plot)  ,data=data2)
lmer(log(Carbon) ~ Trt + (0|Plot),data=data2)
lmer(log(Carbon) ~ Trt + (Sp|Plot),data=data2)
lme
lme(log(Carbon) ~ Trt, random=Sp|Plot,data=data2)
lme(log(Carbon) ~ Trt, random=~Sp|Plot,data=data2)
lme(log(Carbon) ~ Tr, random=~Sp|Plot,data=data2)
lme(log(Carbon) ~ Trt, random=~1|Plot,data=data2)
summary(lme(log(Carbon) ~ Trt, random=~1|Plot,data=data2))
summary(lme(log(Carbon) ~ Trt, random=~(Tr|Plot),data=data2))
summary(lme(log(Carbon) ~ Trt, random=~(Sp|Plot),data=data2))
summary(lme(log(Carbon) ~ Trt, random=~Sp|Plot,data=data2))
lmer(log(Carbon) ~ Trt + (Sp|Plot),data=data2)
colnames(trialData)
trialData_raw <- read.csv("allsubs_choices.csv")
install.packages("glmnet")
library(glmnet)
library(ddply)
library(plyr)
?join
help(join)
install.packages("dplyr")
library(dplyr)
iris
colnames(iris)
group_by(iris, Species)
x <- group_by(iris, Species)
x
str(x)
x
x$Sepal.Length
summarise(x, sLm = mean(Sepal.Length))
summarise(group_by(iris, species), sLm = mean(Sepal.Length))
summarise(group_by(iris, Species), sLm = mean(Sepal.Length))
iris %.%
group_by(Species) %.%
summarise(s = mean(Sepal.Length))
by_species <- iris %.%
+ group_by(Species) %.%
+ summarise(s = mean(Sepal.Length))
by_species <- iris %.%
group_by(Species) %.%
summarise(s = mean(Sepal.Length))
iris
iris %.%
group_by(Species) %.%
summarise(s = mean(Sepal.Length))
x <- iris %.%
group_by(Species) %.%
summarise(s = mean(Sepal.Length))
x
x <- iris %.%
group_by(Species) %.%
summarise(s = mean(Sepal.Length))
clear
f
clear
x <- iris %.%
group_by(Species) %.%
summarise(s = mean(Sepal.Length))
x
str(x)
x$Species
class(x)
x
iris %.%
group_by(Species) %.%
summarise(s = mean(Sepal.Length), n = n())
iris %.%
group_by(Species) %.%
summarise(s = mean(Sepal.Length), n = n(), ips = count_distinct(Sepal.Width))
?%.5
?%.%
?"%.%"
?tbl_df
x = 1
x == (1 | 2)
library(hflights)
data(hflights)
install.packages("hflights")
library(hflights)
filter(hflights, Month ==1)
filter(hflights, Month == (1 | 2))
iris
filter(hflights, Species == "virginica")
filter(iris, Species == "virginica")
filter(iris, Species == ("virginica" | "versicolor"))
x <- "virginica"
x == ("virginica" | "versicolor")
("virginica" | "versicolor")
("virginica" || "versicolor")
x
x in ("virginica", "versicolor")
x %in% ("virginica", "versicolor")
x
x %in% c("virginica", "versicolor")
filter(iris, Species %in% c("virginica", "versicolor"))
colnames(hflights)
hflights %.%
group_by(Dest) %.5
hflights %.%
group_by(Dest) %.%
summarise(first)
hflights %.%
group_by(Dest) %.%
summarise(first(DepTime))
summarise(min(DepTime))
hflights %.%
group_by(Dest) %.%
summarise(min(DepTime))
?join
hflights %.%
group_by(Dest) %.%
summarise(min(DepTime))
a >= hflights %.%
a <- hflights %.%
group_by(Dest) %.%
summarise(min(DepTime))
a
print(a)
a
dim(a)
hflights %.%
group_by(dest) %.%
View(hflights)
colnames(hflights)
hflights %.%
group_by(dest) %.%
do(lm, formula = ActualElapsedTime ~ Month)
hflights %.%
group_by(dest) %.%
do(lm, formula = ActualElapsedTime ~ Month))
hflights %.%
group_by(dest) %.%
do(failwith(NULL, lm), formula = ActualElapsedTime ~ Month))
hflights %.%
group_by(dest) %.%
do(failwith(NULL, lm), formula = ActualElapsedTime ~ Month)
summary(lm(ActualElapsedTime ~ Month, data=hl))
summary(lm(ActualElapsedTime ~ Month, data=hflights))
d <- group_by(hflights, dest)
colnames(hflights)
hflights %.%
group_by(Dest) %.%
do(lm, formula = ActualElapsedTime ~ Month))
hflights %.%
group_by(Dest) %.%
do(lm, formula = ActualElapsedTime ~ Month)
a <- tbl_df(hflights)
a
print(a)
?print
a
data.frame(a)
print(a)
complete_survey_data <- read.csv(file.choose())
complete_survey_data
names(complete_survey_data)
dat<-complete_survey_data #shorten name for ease of use
##Check which variables are factors and change those that need to be to factors
str(dat)
dat$Subject <-as.factor(dat$Subject)
dat$Round <-as.factor(dat$Round)
dat$SkinSite <-as.factor(dat$SkinSite)
dat$InOut <-as.factor(dat$InOut)
dat$Order <-as.factor(dat$Order)
dat$Session <-as.factor(dat$Session)
dat$Doctor <-as.factor(dat$Doctor)
str(dat) #check to see changes were made
##Define null model to see variance explained by grouping variable alone
Null.Model<-lme(Rating~1,random=~1|Subject,data=dat)
Null.Model<-lmer(Rating~1 + (1|Subject),data=dat)
VarCorr(Null.Model) ### This isn't working
library(nlme)
library(multcomp)
library(lme4)
library(multilevel)
install.packages("multcomp")
install.packages("lme4")
names(complete_survey_data)
dat<-complete_survey_data #shorten name for ease of use
##Check which variables are factors and change those that need to be to factors
str(dat)
dat$Subject <-as.factor(dat$Subject)
dat$Round <-as.factor(dat$Round)
dat$SkinSite <-as.factor(dat$SkinSite)
dat$InOut <-as.factor(dat$InOut)
dat$Order <-as.factor(dat$Order)
dat$Session <-as.factor(dat$Session)
dat$Doctor <-as.factor(dat$Doctor)
str(dat) #check to see changes were made
##Define null model to see variance explained by grouping variable alone
Null.Model<-lme(Rating~1,random=~1|Subject,data=dat)
Null.Model<-lmer(Rating~1 + (1|Subject),data=dat)
VarCorr(Null.Model) ### This isn't working
###Calculate anova and then ICC1 to get measure of percentage of variance is between groups
tmod<-aov(Rating~as.factor(Subject), data=dat)
ICC1(tmod) ###  65.85 %
###Calculate Group-mean reliability
Null.Model<-lme(Rating~1,random=~1|Subject,data=dat)
GREL.DAT<-GmeanRel(Null.Model)
names(GREL.DAT)
GREL.DAT$ICC #ICC estimate
GREL.DAT$MeanRel   ### None of this is working same issue as above
m1<-lme(Rating~Temp,random=~1|Subject,data=dat)
m1
summary(m1)
m8<-lmer(Rating~Temp + Round*Trial + (1|Subject) + (1|Doctor),data=dat)
library(lme4)
m8<-lmer(Rating~Temp + Round*Trial + (1|Subject) + (1|Doctor),data=dat)
m8
summary(m8)
m14<-lmer(Rating~Temp + Trial + Personal_Similarity_Av + (1 + Personal_Similarity_Av|Subject) + (1|Round/Doctor),data=dat) ### Only model with T above 2
m14
summary(m14)
x <- as.matrix(subset(na.omit(Cor_Data), select=c("GABA_H2O_Glx", "V_GABA_H2O_Glx", "D_GABA_H2O_Glx", "GM", "generalEF", "Glx_GABA_H2O", "V_Glx_GABA_H2O","D_Glx_GABA_H2O","GABA_H2O", "V_GABA_H2O", "D_GABA_H2O", "Glx", "V_Glx", "D_Glx")))
iris
colnames(iris)
iris[1:4,]
iris[,1:4]
library(glmnet)
install.packages("glmnet")
library(glmnet)
iris[,1:4]
cv.glmnet(iris[,1:4], iris[, 5])
cv.glmnet(iris[,1:3], iris[,4])
iris[, 4]
cv.glmnet(as.matrix(iris[,1:3]), iris[,4])
lassomodel <- cv.glmnet(as.matrix(iris[,1:3]), iris[,4])
lassomodel
lassomodel$name
summary(lassomodel)
library(ggplot2)
??ggplot2
library(dplr)
library(dplyr)
?inner_join
library(plyr)
mydf = data.frame(x=1:5, y=c(1,2,NA,4,5), id=factor(1:5))
ddply(mydf, .(id), transform, mean(x,y,na.rm=T))
mydf
ddply(mydf, .(id), summarize, mean(x,y,na.rm=T))
ddply(mydf, .(id), summarise, mean(x,y,na.rm=T))
ddply(mydf, .(id), summarise, mean(x,y))
ddply(mydf, .(id), summarise, sum(x,y))
ddply(mydf, .(id), summarise, mean(x,y))
ddply(mydf, .(id), summarise, a=mean(x,y))
ddply(mydf, .(id), transform, a=mean(x,y))
ddply(mydf, .(id),function(df){mean(df$x,df$y)})
ddply(mydf, .(id),function(df){mean(df$x,df$y)})
mydf
ddply(mydf, .(id),function(df){mean(df$x,df$y, na.rm=T)})
mydf[3]
mydf[,3]
mydf[3,]
mydf[-3,=
mydf[-3,]
mydf1 = mydf[-3,]
ddply(mydf1, .(id), transform, mean(x,y))
ddply(mydf1, .(id), transform, m=mean(x,y))
mydf
mydf1
ddply(mydf, .(id), transform, a=mean(x,y))
ddply(mydf, .(id), transform, a=mean(c(x,y)))
mean(1, NA)
mean(1, NA, na.rm=T)
x = 1
y = NA
y
mean(x, y)
mean(x, y, na.rm=T)
ddply(mydf, .(id), transform, a=mean(c(x,y)))
ddply(mydf, .(id), transform, mean(c(x,y)))
ddply(mydf, .(id), transform, mean=mean(c(x,y)))
ls
install.packages("MTurkR")
?melt
library(reshape2)
?melt
library(colorRamps)
library(RColorBrewer)
install.packages(colorRamps)
install.packages('colorRamps')
install.packages('RColorBrewer')
install.packages("RColorBrewer")
install.packages('dplyr')
??dplyr
detach(dplyr)
install.packages("dplyr")
install.packages('ggplot2')
library(ggplot)
library(ggplot2)
install.packages('ri2py')
install.packages('dplyr')
library(ggplot2)
?scale_color_manuakl
?scale_color_manual
iris
colnames(iris)
transform(iris, new_col = mean(c(Sepal.Length, Sepal.Width)))
transform(iris, new_col = mean(Sepal.Length, Sepal.Width))
5 + NA
library(dplr)
library(dplyr)
iris
iris$id <- 1:150
iris
grouped_iris <- group_by(iris, id)
grouped_iris
mutate(grouped_iris, mean_all = mean(c(Sepal.Length, Sepal.Width)))
mutate(grouped_iris, mean_all = mean(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/ta/CLIPR TA/Untitled.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
iris %>%
group_by(id) %>%
mutate(grouped_iris, mean_all = mean(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), na.rm=T))
iris %>%
group_by(id) %>%
mutate(grouped_iris, mean_alls = mean(c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), na.rm=T))
iris
subset(iris, Species == "virginica")
subset(iris, Species == "virginica" && Petal.Length > 6)
subset(iris, Species == "virginica" & Petal.Length > 6)
install.packages("tinyr")
install.packages("tinyR")
subset(iris, Species == "virginica" && Petal.Length > 6)
subset(iris, Species == "virginica" & Petal.Length > 6)
library(tidyr)
vignette("tidy-data")
source('~/Dropbox/ta/CLIPR TA/Sharoda/ddAnalysisCore.R', echo=TRUE)
library(plyr)
iris
colnames(iris)
rename(iris, Sepal.Length = sl)
colnames(iris)
rename(iris, sl = Sepal.Length)
?rename(iris, sl = Sepal.Length)
iris[1,]
iris[1,]$Sepal.Length
library(ggplot2)
setwd("~/Dropbox/projects/genes_good/tasks/category_switch/js_category_switch/data")
qs <- read.csv("questiondata.csv", header=FALSE)
library(dplyr)
library(ggplot2)
qs
63 /3
qs %>% group_by(ID, question) %>% summarise(mean(RT))
colnames(qs) <- c("ID", "question", "value")
qs %>% group_by(ID, question) %>% summarise(mean(value))
alpha_subs <- c(
"A149ROBL26JWPJ:3X65QVEQI163TBCXP7E2MB4GUO4LCM"
"A1XOXGWBAN6HEJ:34QN5IT0T0AOKCXYJ2CEM5G91Z780T"
"A2B8HPIZDKYKDR:3BXQMRHWK0HJLNBIBA0HGU5B1TZUM5"
"A2HHKBW8HQWI66:3DQQ64TANH42YUX0YQ7AFMK3RELPWV"
"A3Q198AX290HZD:3ZY8KE4ISKMAJHYA8TH3TPRZP16VQJ"
"AA3L3CZRK6VIR:3Z4AIRP3C7WE62JONTS6G9GCX0LX1S"
"AHJQDF8PAHVDP:3M0NZ3JDP2H2ZFKMPYI3GK94HGP5ZG"
"AKLV0WIZZ356X:3JNQLM5FT55QVTKVSEPWAYVUIXQ2LT"
"AO7FM98CP90CL:3WAKVUDHUXZ00K4V74YSXC8L648U7Y"
"AVHZJ2HQJG3NB:3TK8OJTYM24PJ5XV8G2ETK1PK5KVPS"
"AVI7K876BV3QL:3S4AW7T80C10Y7ZIWS8K3DSS2BML48")
alpha_subs <- c(
"A149ROBL26JWPJ:3X65QVEQI163TBCXP7E2MB4GUO4LCM",
"A1XOXGWBAN6HEJ:34QN5IT0T0AOKCXYJ2CEM5G91Z780T",
"A2B8HPIZDKYKDR:3BXQMRHWK0HJLNBIBA0HGU5B1TZUM5",
"A2HHKBW8HQWI66:3DQQ64TANH42YUX0YQ7AFMK3RELPWV",
"A3Q198AX290HZD:3ZY8KE4ISKMAJHYA8TH3TPRZP16VQJ",
"AA3L3CZRK6VIR:3Z4AIRP3C7WE62JONTS6G9GCX0LX1S",
"AHJQDF8PAHVDP:3M0NZ3JDP2H2ZFKMPYI3GK94HGP5ZG",
"AKLV0WIZZ356X:3JNQLM5FT55QVTKVSEPWAYVUIXQ2LT",
"AO7FM98CP90CL:3WAKVUDHUXZ00K4V74YSXC8L648U7Y",
"AVHZJ2HQJG3NB:3TK8OJTYM24PJ5XV8G2ETK1PK5KVPS",
"AVI7K876BV3QL:3S4AW7T80C10Y7ZIWS8K3DSS2BML48")
alpha_subs
qs$ID %in% alpha_subs
transform(qs,ID %in% alpha_subs)
transform(qs,alpha = ID %in% alpha_subs)
source('~/.active-rstudio-document', echo=TRUE)
qs
ggplot(subset(qs, question=="difficulty"), aes(value, fill=alpha)) + geom_density()
task_data <- read.csv("../data/task_data.csv")
task_data
ID %in% alpha_subs
qs$ID %in% alpha_subs
qs$ID %in% alpha_subs == FALSE
qs <- read.csv("questiondata.csv", header=FALSE)
colnames(qs) <- c("ID", "question", "value")
?read.csv
qs <- read.csv("questiondata.csv", header=FALSE, col.names=c("ID", "question", "value") )
alpha_subs <- c("A149ROBL26JWPJ:3X65QVEQI163TBCXP7E2MB4GUO4LCM", "A1XOXGWBAN6HEJ:34QN5IT0T0AOKCXYJ2CEM5G91Z780T", "A2B8HPIZDKYKDR:3BXQMRHWK0HJLNBIBA0HGU5B1TZUM5","A2HHKBW8HQWI66:3DQQ64TANH42YUX0YQ7AFMK3RELPWV","A3Q198AX290HZD:3ZY8KE4ISKMAJHYA8TH3TPRZP16VQJ","AA3L3CZRK6VIR:3Z4AIRP3C7WE62JONTS6G9GCX0LX1S","AHJQDF8PAHVDP:3M0NZ3JDP2H2ZFKMPYI3GK94HGP5ZG","AKLV0WIZZ356X:3JNQLM5FT55QVTKVSEPWAYVUIXQ2LT","AO7FM98CP90CL:3WAKVUDHUXZ00K4V74YSXC8L648U7Y","AVHZJ2HQJG3NB:3TK8OJTYM24PJ5XV8G2ETK1PK5KVPS","AVI7K876BV3QL:3S4AW7T80C10Y7ZIWS8K3DSS2BML48")
qs %<>% filter(ID %in% alpha_subs == FALSE)
install.packages(c("dplyr", "magrittr", "tidyr"))
library(dplyr)
library(ggplot2)
qs <- read.csv("questiondata.csv", header=FALSE, col.names=c("ID", "question", "value") )
alpha_subs <- c("A149ROBL26JWPJ:3X65QVEQI163TBCXP7E2MB4GUO4LCM", "A1XOXGWBAN6HEJ:34QN5IT0T0AOKCXYJ2CEM5G91Z780T", "A2B8HPIZDKYKDR:3BXQMRHWK0HJLNBIBA0HGU5B1TZUM5","A2HHKBW8HQWI66:3DQQ64TANH42YUX0YQ7AFMK3RELPWV","A3Q198AX290HZD:3ZY8KE4ISKMAJHYA8TH3TPRZP16VQJ","AA3L3CZRK6VIR:3Z4AIRP3C7WE62JONTS6G9GCX0LX1S","AHJQDF8PAHVDP:3M0NZ3JDP2H2ZFKMPYI3GK94HGP5ZG","AKLV0WIZZ356X:3JNQLM5FT55QVTKVSEPWAYVUIXQ2LT","AO7FM98CP90CL:3WAKVUDHUXZ00K4V74YSXC8L648U7Y","AVHZJ2HQJG3NB:3TK8OJTYM24PJ5XV8G2ETK1PK5KVPS","AVI7K876BV3QL:3S4AW7T80C10Y7ZIWS8K3DSS2BML48")
qs %<>% filter(ID %in% alpha_subs == FALSE)
library(dplyr)
library(ggplot2)
qs <- read.csv("questiondata.csv", header=FALSE, col.names=c("ID", "question", "value") )
alpha_subs <- c("A149ROBL26JWPJ:3X65QVEQI163TBCXP7E2MB4GUO4LCM", "A1XOXGWBAN6HEJ:34QN5IT0T0AOKCXYJ2CEM5G91Z780T", "A2B8HPIZDKYKDR:3BXQMRHWK0HJLNBIBA0HGU5B1TZUM5","A2HHKBW8HQWI66:3DQQ64TANH42YUX0YQ7AFMK3RELPWV","A3Q198AX290HZD:3ZY8KE4ISKMAJHYA8TH3TPRZP16VQJ","AA3L3CZRK6VIR:3Z4AIRP3C7WE62JONTS6G9GCX0LX1S","AHJQDF8PAHVDP:3M0NZ3JDP2H2ZFKMPYI3GK94HGP5ZG","AKLV0WIZZ356X:3JNQLM5FT55QVTKVSEPWAYVUIXQ2LT","AO7FM98CP90CL:3WAKVUDHUXZ00K4V74YSXC8L648U7Y","AVHZJ2HQJG3NB:3TK8OJTYM24PJ5XV8G2ETK1PK5KVPS","AVI7K876BV3QL:3S4AW7T80C10Y7ZIWS8K3DSS2BML48")
qs %<>% filter(ID %in% alpha_subs == FALSE)
library(maggritr)
library(maggritr
)
library(magritr)
library(magrittr)
%<>%
qs <- qs %>% filter(ID %in% alpha_subs == FALSE)
qs
qs %>% group_by(ID, question) %>% summarise(mean(value))
ggplot(qs, aes(value, fill=question)) + geom_density(alpha=0.5)
ggplot(qs, aes(question, value, fill=question)) + geom_violin() + geom_point()
ggplot(qs, aes(question, value, fill=question)) + geom_boxplot() + geom_point()
ggplot(qs, aes(question, value, fill=question)) + geom_boxplot() + geom_point(position=position_jitter(width=.0005), size=2)
ggplot(qs, aes(question, value, fill=question)) + geom_boxplot() + geom_point(position=position_jitter(width=.005), size=2)
ggplot(qs, aes(question, value, fill=question)) + geom_boxplot() + geom_point(position=position_jitter(width=.01)
)
ggplot(qs, aes(question, value, fill=question)) + geom_boxplot() + geom_point(position=position_jitter(width=.01))
ggplot(qs, aes(question, value, fill=question)) + geom_boxplot() + geom_point(position=position_jitter(width=.5))
ggplot(qs, aes(question, value, fill=question)) + geom_boxplot() + geom_point(position=position_jitter(width=.1))
ggplot(qs, aes(question, value, fill=question)) + geom_boxplot() + geom_point(position=position_jitter(width=.05))
ggplot(qs, aes(question, value, fill=question)) + geom_boxplot() + geom_point(position=position_jitter(width=.02))
task_data
task_data
colnames(task_data)
task_data %>% group_by(condition) %>% summarise(mean(RT))
ggplot(task_data, aes(condition, RT, fill=condition)) + geom_boxplot() + geom_point(position=position_jitter(width=.02))
ggplot(task_data, aes(condition, RT, fill=condition)) + geom_point(position=position_jitter(width=.02))
ggplot(task_data, aes(condition, RT, color=condition)) + geom_point(position=position_jitter(width=.02)) + stat_summary(fun.y=mean, geom="point", size=5)
ggplot(task_data, aes(condition, RT, color=condition)) + geom_violin()
task_data
ggplot(task_data, aes(condition, RT, color=condition)) + stat_summary(fun.y='mean', geom='point')
ggplot(task_data, aes(condition, RT, color=condition)) + geom_boxplot()
ggplot(task_data, aes(condition, RT)) + stat_summary(fun.y=mean, geom='point')
task_data
task_data
colnames(task_data)
task_data <- read.csv("../data/clean_trial_data.csv")
ggplot(task_data, aes(condition, RT)) + stat_summary(fun.y=mean, geom='point')
str(task_data)
task_data <- read.csv("../data/clean_trial_data.csv")
str(task_data)
subset(task_data, ACC="BACK")
subset(task_data, ACC=="BACK")
subset(task_data, ACC=="FORWARD")
task_data
subset(task_data, ACC==""FORWARD"")
subset(task_data, ACC==FORWARD")
subset(task_data, ACC=="FORWARD")
head(task_data)
source('~/.active-rstudio-document', echo=TRUE)
task_data
source('~/.active-rstudio-document', echo=TRUE)
str(task_data)
source('~/.active-rstudio-document', echo=TRUE)
str(task_data)
source('~/.active-rstudio-document', echo=TRUE)
str(task_data)
source('~/.active-rstudio-document', echo=TRUE)
str(task_data)
source('~/.active-rstudio-document', echo=TRUE)
str(task_data)
source('~/.active-rstudio-document', echo=TRUE)
str(task_data)
?read.csv
source('~/.active-rstudio-document', echo=TRUE)
str(task_data)
?read.csv
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?read.csv
str(task_data)
ggplot(task_data, aes(condition, RT)) + stat_summary(fun.y=mean, geom='point')
ggplot(task_data, aes(condition, RT, color=condition)) + geom_violin()
ggplot(task_data, aes(condition, RT, fill=condition)) + geom_violin()
ggplot(task_data, aes(condition, RT, fill=condition)) + geom_boxplot()
ggplot(task_data, aes(condition, RT)) + stat_summary(fun.y=mean, geom='point')
ggplot(task_data, aes(condition, RT, color=condition)) + stat_summary(fun.y=mean, geom='point', size=3)
ggplot(task_data, aes(condition, RT, color=condition)) + stat_summary(fun.y=mean, geom='point', size=3) + stat_summary(fun.data = mean_cl_normal, geom = "errorbar", mult = 1)
library(Hmisc)
install.package("Hmisc")
install.packages("Hmisc")
ggplot(task_data, aes(condition, RT, color=condition)) + stat_summary(fun.y=mean, geom='point', size=3) + stat_summary(fun.data = mean_cl_normal, geom = "errorbar", mult = 1)
ggplot(task_data, aes(condition, RT, color=condition)) + stat_summary(fun.y=mean, geom='point', size=5) + stat_summary(fun.data = mean_cl_normal, geom = "errorbar", mult = 1, size=2)
ggplot(task_data, aes(condition, RT, color=condition)) + stat_summary(fun.y=mean, geom='point', size=5) + stat_summary(fun.data = mean_cl_normal, geom = "errorbar", mult = 1, size=1)
?t.test
